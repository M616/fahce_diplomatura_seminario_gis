---
title: "Sistemas de información geográfica. TP1: Geoprocesos con datos vectoriales"
author: Prof. Marcos May
email: mmmay@fahce.unlp.edu.ar
format:
  pdf:
    toc: true
    toc-title: Indice
    number-sections: false
    toc-depth: 3
    header-includes:
      - \titlehead{\flushright\includegraphics[width=0.4\textwidth]{../../images/Logo-fahce-unlp-negro.png}}
editor_options: 
  chunk_output_type: inline
---

------------------------------------------------------------------------

## Objetivos

Este trabajo se propone presentar cómo son tratados los **objetos espaciales vectoriales en R**, principalmente a través del uso de la librería `sf` dentro del ecosistema `tidyverse`. Se abordan conceptos fundamentales sobre el formato, la manipulación y la visualización de datos vectoriales, y se exploran algunas de las **operaciones básicas de geoprocesamiento.**y de visualización tanto dinámica (`mapview()`) como estática (`ggplot2 + geom_sf()`), aplicadas a datos reales provenientes de fuentes públicas.

```{r}
#| label: objetivos
#| eval: false
#| include: false

### Objetivo general

#**Manipular, visualizar y analizar datos geográficos ##vectoriales en R, utilizando herramientas del paquete #`{sf}` #y del ecosistema `{tidyverse}`.**

#### Objetivos específicos

#-   Comprender el formato y la estructura de los objetos #vectoriales en

#    R.  

#-   Abrir y trabajar con diferentes formatos de archivos #geoespaciales (`.csv`, `.kml`, `.shp`, `.gpkg`).

#-   Explorar y visualizar datos espaciales mediante #`mapview()` y `geom_sf()`.

#-   Aplicar filtros por atributos y realizar uniones #espaciales.

#-   Revisar y utilizar fuentes de datos abiertas disponibles #(Gobierno de la Provincia de Buenos Aires, INDEC, #OpenStreetMap, RENABAP, entre otras).

```

------------------------------------------------------------------------

Antes de empezar cargamos las librerías necesarias:

```{r}
#| label: setup
#| warning: false
#| message: false
#| echo: true

library(tidyverse)   # Manipulación de datos  
library(sf)          # Datos espaciales  
library(mapview)     # Mapas interactivos  
library(here)        # Para manejar el path
library(janitor)     # Para limpieza de datos
library(ggspatial)   # Para insertar rosa de los vientos y barra de                         escala en los mapas
library(viridis)     # Para rampa de colores
library(viridisLite) # Para rampa de colores
```

## Ejercitación 1. Tipo de Vectores. Carga y exploración de datos

En los Sistemas de Información Geográfica los datos vectoriales se utilizan para representar entidades geográficas mediante tres tipos básicos de geometrías:

-   **Puntos:** representan ubicaciones precisas, como edificios, centros de salud o antenas.

-   **Líneas:** representan elementos lineales, como caminos, ríos o redes de transporte.

-   **Polígonos:** representan superficies delimitadas, como barrios, parcelas o áreas censales.

Cuando se cargan en R mediante la librería `sf`, estos datos vectoriales se transforman en data frames espaciales, también conocidos como geodataframes u objetos sf. Al igual que un data.frame o un tibble, estos objetos tienen filas (una por cada entidad geográfica) y columnas (atributos descriptivos). Lo que los distingue es la inclusión de una columna especial llamada **geometry**, que almacena la información espacial (coordenadas de puntos, líneas o polígonos).

Este diseño permite trabajar de forma integrada con los datos tradicionales y espaciales. Por ejemplo, al aplicar funciones como `print()` o `head()` se visualiza tanto la tabla como un resumen de la geometría. Además, los objetos sf son plenamente compatibles con el ecosistema `tidyverse`, lo que permite usar funciones como `filter()`, `mutate()`, `group_by()` o `select()` sobre capas espaciales. Estas operaciones pueden luego complementarse con funciones específicas para análisis geográficos como `st_join()`, `st_buffer()`, `st_intersection()`, entre otras que se verán más adelante.

Una vez abiertos, los datos pueden explorarse visualmente de dos formas principales:

-   **Visualización interactiva con `mapview()`:** permite inspeccionar los datos de forma dinámica, hacer zoom, ver atributos al pasar el cursor y superponer capas. Esta herramienta es ideal para la etapa exploratoria, aunque **no puede visualizarse directamente en archivos PDF**. Se recomienda su uso durante el trabajo en RStudio o en informes generados en formato HTML, donde la interactividad es compatible.

-   **Visualización estática:**

    -   **Con `plot()` (R base):** ofrece una forma rápida y sencilla de visualizar objetos `sf`. Es útil para hacer inspecciones básicas de los datos espaciales, como revisar geometrías, identificar errores topológicos o visualizar atributos de forma individual. No requiere paquetes adicionales.

    -   **Con `ggplot2` y `geom_sf()`:** permite generar mapas reproducibles y de alta calidad, con mayor control sobre la estética, las escalas, los temas y la combinación con otros tipos de gráficos. Este enfoque es especialmente adecuado para informes formales, publicaciones científicas o presentaciones, y se desarrollará más adelante en el documento.

A continuación, se presentan ejemplos concretos de cada tipo de geometría (puntos, líneas y polígonos), utilizando fuentes de datos abiertas provistas por organismos oficiales (Gobierno de la Provincia de Buenos Aires, INDEC, RENABAP, OpenStreetMap, entre otros). Los datos provienen de distintos formatos geográficos (como .`csv`, `.geojson`, .`shp` y .`gpkg`) y son abiertos en R mediante las funciones `st_read()` (cuando el archivo ya contiene geometría) o `st_as_sf()` (cuando la geometría se construye a partir de coordenadas). Se abordan algunas herramientas de exploración gráfica como `plot()` y `mapview()`.

::: callout-caution
#### Descarga de archivos

Una vez descargados los archivos en la carpeta de descargas, deberán ser movidos a la carpeta de trabajo del proyecto. Se recomienda ubicarlos en la subcarpeta `data/raw/` dentro del directorio raíz. Esta carpeta está destinada a almacenar los archivos *crudos*, es decir, aquellos que aún no han sido modificados.

En la subcarpeta `data/processed/`almacenaremos nuestros datos ya procesados.
:::

### Puntos

**Capa:** Establecimientos de Salud Públicos.

**Fuente:** Ministerio de Salud de la Provincia de Buenos Aires. ( A través de Portal de Datos Abiertos de la Provincia de Buenos Aires).

**Link:** <https://catalogo.datos.gba.gob.ar/dataset/establecimientos-salud/archivo/c52f9497-9eab-4ecd-a382-b4e4c6033a02>

**Formato:** `.csv` (valores separados por comas)

El formato **.csv** (Comma-Separated Values) es un formato tabular ampliamente utilizado, aunque no incluye información espacial de forma explícita. Para convertirlo en un objeto espacial, es necesario indicar manualmente qué columnas contienen las coordenadas. Es importante respetar el orden: primero la **longitud** (*x*), luego la **latitud** (*y*) —en este caso, las columnas se llaman `long` y `lat`.

Para realizar esta conversión, se utiliza la función `st_as_sf()` de la librería `sf`. Además de las coordenadas, la función requiere que se indique el sistema de referencia de coordenadas (**crs**) en el que están expresadas la longitud y la latitud.

```{r}
#| label: salud_csv
salud<-
  read_delim(here("data/raw/salud/establecimientos_salud_publicos-2025.csv"), 
    delim = ";")
```

```{r}
#| label: salud_sf

salud_sf <- 
  st_as_sf(salud,
           coords = c("long", "lat"),
           remove = FALSE,
           crs = 4326)
```

Ya tenemos nuestro primer dataframe espacial. Si lo exploramos mediante el comando `class()`, veremos que, además de la clase `data.frame` asociada a los dataframes tradicionales, nuestro objeto tiene también la clase `sf`.

```{r}
#| label: salud_sf_class

class(salud_sf)
```

Este tipo de objetos tiene la particularidad de que, además de las columnas tradicionales, incorpora una columna especial llamada `geometry`, que almacena la información espacial, como el tipo de geometría y las coordenadas geográficas.

```{r}
#| label: salud_sf_glimpse
glimpse(salud_sf)
```

Exportamos el archivo en formato gpkg (formato explicado líneas abajo):

```{r}
#| label: salud_sf_write
#| message: false
#| warning: false
dir.create(here('data/processed/salud'))

st_write(salud_sf,
         here('data/processed/salud/centros_de_salud.gpkg'),
         append = FALSE)
```

#### Visualización rápida con `plot()` (R base)

Una forma simple y directa de visualizar datos espaciales es utilizando la función `plot()` de R base, que es compatible con objetos `sf`. Esta función permite generar mapas estáticos sin necesidad de cargar paquetes adicionales de visualización.

Si usamos `plot()` directamente sobre el objeto `sf`, se generarán múltiples paneles, uno por cada variable del conjunto:

```{r}
#| label: salud_sf_plot_base
plot(salud_sf)
```

Podemos seleccionar una sola columna (atributo) utilizando el nombre de la variable. Por ejemplo, si queremos graficar únicamente la variable `Dep`, usamos:

```{r}
#| label: salud_sf_plot_Dep
plot(salud_sf[,'Dep'])
```

Esto mostrará un mapa donde las geometrías se colorean según los valores de la variable `Dep`.

También podemos filtrar por fila, es decir, seleccionar una sola entidad geográfica (por ejemplo, un solo punto, línea o polígono) y graficarla:

```{r}
#| label: salud_sf_plot_raw
#| fig-width: 2
#| fig-height: 2

plot(salud_sf[355, 'Dep'])
```

En este caso se visualiza solo el punto ubicado en la posición 355 del dataframe. Este método cobra más relevancia cunado queremos explorar polígonos, por ejemplo para ver la forma de algún radio censal o barrio.

------------------------------------------------------------------------

**Capa:** Establecimientos educativos.

**Fuente:** DGCyE. (A través de Portal de Datos Abiertos de la Provincia de Buenos Aires).

**Link:** <https://catalogo.datos.gba.gob.ar/dataset/establecimientos-educativos>

**Formato:** `.geojson` (GeoJSON)

El **formato `.geojson`** es una extensión del formato JSON especialmente diseñado para representar información geoespacial. Es un formato **ligero, basado en texto plano**, ampliamente utilizado para intercambio de datos en la web y compatible con una gran variedad de plataformas y librerías.

A diferencia del `.csv`, los archivos `.geojson` **ya contienen información geométrica estructurada**, y pueden abrirse directamente como objetos `sf` usando `st_read()`, sin necesidad de especificar columnas de coordenadas.

```{r}
#| label: st_read_escuelas
escuelas <-
  st_read(here("data/raw/educacion/establecimientos-educativos-30062025.geojson"))
```

En este caso, al abrir el archivo, la función st_read() nos devuelve un mensaje informando:

-   `Reading layer 'establecimientos-educativos-fecha'`: está leyendo la capa con ese nombre. A veces los archivos GeoJSON incluyen un nombre de capa interno que puede no coincidir exactamente con el nombre del archivo.

-   `from data source`: indica la ruta completa al archivo que se está leyendo.

-   `using driver 'GeoJSON'`: está utilizando el driver adecuado para leer archivos en formato GeoJSON.

-   `Simple feature collection with 21568 features and 33 fields`: el archivo contiene una colección de objetos espaciales simples (sf) con 21.568 elementos (features), cada uno con 33 atributos (campos o columnas).

-   `Geometry type: POINT`: la geometría de las entidades es de tipo punto (es decir, cada establecimiento educativo está representado por una coordenada geográfica).

-   `Dimension: XY`: las geometrías están en dos dimensiones: longitud (X) y latitud (Y). No incluye información de altitud ni medidas adicionales.

-   `Bounding box: xmin: -63.38269 ymin: -40.8115 xmax: -56.67471 ymax: -33.29664`: define la extensión espacial del conjunto de datos, es decir, el rectángulo que contiene a todos los puntos.

-   `Geodetic CRS: WGS 84`: indica que el sistema de referencia de coordenadas (CRS) es WGS 84, un sistema geodésico estándar (EPSG:4326), utilizado globalmente, por ejemplo, en GPS y servicios como Google Maps.

### Líneas

**Capa:** Avenidas del partido de La Plata.

**Fuente:** OpenStreetMap (OSM), descargado mediante API.

**Formato:** .gpkg (GeoPackage).

El formato GeoPackage (.gpkg) es un estándar moderno y recomendado para trabajar con información geoespacial. A diferencia de archivos como .shp (que requieren múltiples archivos complementarios), un .gpkg almacena todos los datos en un único archivo, incluyendo geometría, atributos, proyecciones y múltiples capas.

::: callout-note
#### Open Street Map (OSM)

Es un proyecto colaborativo que busca construir un mapa libre, abierto y editable del mundo. Al estilo de una “Wikipedia de los mapas”, cualquier persona puede contribuir agregando calles, edificios, escuelas o espacios públicos. Esto lo convierte en una fuente valiosa, especialmente en contextos donde los datos oficiales son escasos o difíciles de obtener.

Una de sus ventajas clave es que OSM es gratuito, a diferencia de servicios como Google Maps que tienen restricciones de uso o cobran por volumen. Por eso, es muy utilizado en proyectos educativos, desarrollos de software libre, investigaciones y planificación urbana.

Sin embargo, la cobertura y el nivel de detalle pueden variar según la región ya que dependen del grado de participación de la comunidad local. En grandes ciudades o áreas con comunidades activas la cartografía suele estar muy actualizada; en cambio en zonas rurales o menos representadas puede haber vacíos o menor precisión. Aun así, es una fuente confiable, abierta y revisada continuamente, con mecanismos para validar y corregir los datos aportados.

En R, una de las formas más comunes de acceder a OSM es a través del paquete osmdata, que permite realizar consultas a la API y descargar datos vectoriales directamente como objetos sf. Ver catalogo: <https://wiki.openstreetmap.org/wiki/Map_features>
:::

```{r}
#| echo: true
#| label: avenidas
avenidas <-
  st_read(here("data/raw/OSM/avenidas_osm.gpkg"))
```

### Polígonos

**Capa:** Radios censales 2022

**Fuente:** Repositorio Institucional CONICET (Rodríguez, Gonzalo Martín)

**Link:** <https://ri.conicet.gov.ar/handle/11336/238198>

**Formato:** .shp (Shapefile).

El formato Shapefile (.shp) es uno de los formatos vectoriales más antiguos y extendidos en los Sistemas de Información Geográfica. Fue desarrollado por ESRI y permite almacenar información geoespacial de puntos, líneas o polígonos, junto con sus atributos.

Un shapefile no es un único archivo, sino un conjunto de al menos tres archivos obligatorios, que deben estar en la misma carpeta para que la información sea leída correctamente:

-   `.shp`: contiene las geometrías (la representación espacial de los objetos).

-   `.shx`: contiene un índice de las geometrías, que permite un acceso más rápido.

-   `.dbf`: almacena los atributos (es una tabla en formato dBase, similar a una hoja de cálculo).

Además, pueden aparecer archivos adicionales:

-   `.prj`: contiene la información de proyección (sistema de coordenadas).

-   `.cpg`: indica la codificación de caracteres del archivo .dbf (útil para mostrar tildes y eñes).

-   .`qpj`: una variante moderna del .prj, usada por algunos programas como QGIS.

Para trabajar correctamente con un shapefile, es importante mantener juntos todos estos archivos (el archivo `.shp` por sí solo no es suficiente). Se recomienda guardarlos en una subcarpeta específica.

En este caso, se trata de la capa de radios censales del CNPHV 2022. Representa unidades geográficas en las que se organizan los operativos censales, y es una capa clave para análisis sociodemográficos.

```{r}
#| label: radios
radios <- 
  st_read(here("data/raw/censo/radios_censales/Radios 2022 v2025-1.shp"))
```

Ploteamos el primer elemento de la primera columna:

```{r}
#| label: radios_plot
plot(radios[1,1])
```

Si queremos conocer el sistema de referencia de coordenadas (CRS) de una capa espacial, podemos utilizar la función `st_crs()`. Esta función nos mostrará la información completa del CRS asociado al objeto. Dentro del mensaje que devuelve, al final encontraremos una línea como: `ID["EPSG",3857]]`. Esto indica que el sistema de referencia corresponde al EPSG:3857, conocido como WGS 84 / Pseudo-Mercator. Podemos consultar más detalles sobre este sistema en el sitio oficial: <https://epsg.io/3857>, un sitio web que ofrece una interfaz accesible para explorar el contenido del registro EPSG, basado en los datos oficiales mantenidos por el IOGP (International Association of Oil & Gas Producers).

```{r}
#| label: radios_crs
st_crs(radios)
```

------------------------------------------------------------------------

**Capa:** Barrios populares (RENABAP)

**Fuente:** Registro Nacional de Barrios Populares (RENABAP), disponible en datos.gob.ar

**Link:** <https://datos.gob.ar/dataset/habitat-registro-nacional-barrios-populares>

**Formato:** `.gpkg` mal guardado (sin extensión)

Esta capa contiene los polígonos correspondientes a los **barrios relevados por el RENABAP**, que representan áreas urbanas informales reconocidas oficialmente por el Estado Nacional. Estos datos permiten identificar situaciones de vulnerabilidad habitacional y son clave en estudios urbanos, sociales y de accesibilidad.

El archivo provisto está en formato GeoPackage, pero fue **mal guardado sin extensión**, lo que genera una advertencia al intentar leerlo con `sf`. Aun así, `st_read()` logra interpretar correctamente el contenido si se especifica la ruta al archivo.

```{r}
#| label: renabap
renabap <- 
  st_read(here("data/raw/renabap/renabap-datos-barrios-gpkg"))
```

## Ejercitación 2. Visualización interactiva con `mapview()`

La función `mapview()` (perteneciente a la librería del mismo nombre) es utilizada para explorar datos espaciales de forma rápida e interactiva. Una de las principales ventajas que se reconocen en mapview es su simplicidad: con una sola línea de código los objetos espaciales pueden ser visualizados directamente en un visor dinámico, ya sean puntos, líneas o polígonos. No es necesario que se configure un entorno complejo ni que se escriban muchas líneas de código; basta con que el objeto espacial sea cargado, y el paquete se encargará de mostrarlo sobre un mapa de fondo con herramientas de zoom y control de capas incluidas de manera automática. Los mapas generados son interactivos: se permite hacer zoom, desplazarse por el mapa, hacer clic sobre los elementos para que sus atributos sean mostrados, y alternar entre distintas capas si hay más de una cargada. Por esto la herramienta es ampliamente utilizada en la exploración preliminar de datos geográficos.

Cuando `mapview()` es ejecutada desde un script o desde un chunk de R Markdown el mapa es abierto automáticamente en el visor interactivo de RStudio, según el entorno en que se esté trabajando. Si se está utilizando RStudio, el mapa será visualizado en la pestaña "Viewer"; si en cambio se trabaja con un documento R Markdown que se renderiza a HTML, el mapa será incrustado en el informe final. A continuación se presentan algunos ejemplos con las capas que han sido cargadas.

### 1. Visualización básica

```{r}
#| label: salud_mapview
#| echo: true
#| eval: false

mapview(salud_sf)
```

![](images/tp1_01_salud_sf.jpg){width="604"}

### 2. Mapas temáticos

Cuando tenemos información estadística o de otra índole asociada a una ubicación geográfica, una excelente manera de visualizarla es a través de un mapa temático. Este tipo de mapa nos permite ver dónde ocurre algo, cómo se distribuye en el espacio y con qué intensidad o categoría.

La clave está en combinar datos espaciales (por ejemplo: partidos, provincias, regiones) con valores o categorías asociados a esas unidades. Dependiendo del nivel de medición de la variable podremos representarla gráficamente de diversos modos. En el caso de las variables cualitativas, que refieren a categorías sin un orden numérico, lo habitual es utilizar colores bien diferenciados para cada una de ellas. Así, a cada una se le asigna un color distinto, sin usar degradados porque no hay una relación de “más” o “menos” entre esas categorías.

En cambio, cuando la variable es numérica y tiene un sentido de magnitud —es decir, valores que van de menor a mayor— lo más habitual es representarla mediante un mapa cloroplético. Este tipo de mapa colorea las áreas geográficas según los valores de la variable numérica, usando gradientes de color que permiten visualizar cómo varía la cantidad o intensidad a lo largo del territorio.

#### Visualización de variables categóricas

```{r}
#| label: mapview_zcol
#| echo: true
#| eval: false
mapview(escuelas, zcol = "sector")
```

```{r}
#| label: mapview_zcol_col.regions
#| echo: true
#| eval: false
cols_sector <- c("Público" = "steelblue", "Privado" = "orange")

escuelas |>  
  filter(municipio_nombre == 'Ensenada' ) |> 
  mapview(zcol = "sector", 
          layer.name = "Escuelas de Ensenada por sector", 
          col.regions = cols_sector,
          label = 'establecimiento_nombre',
          alpha = 0.5)
```

![](images/tp1_02_escuelas_ensenada.jpg)

#### Mapas cloropléticos (variables numéricas)

En este caso haremos un mapa cloroplético a partir de la capa `RENABAP` y la variable `cantidad_familias_aproximada`

```{r}
#| label: map_view_continua
#| echo: true
#| eval: false

renabap |> 
  filter(departamento == 'La Plata') |> 
  mapview(zcol = 'cantidad_familias_aproximada',
          layer.name = 'cantidad familias',
          #col.regions = viridisLite::magma(n= 13, direction = -1))#, 
          col.regions = viridis)
          #at = quantile(renabap$cantidad_familias_aproximada, probs = seq(0, 1, 0.25))  )

```

### 3. Superposición simple de capas

```{r}
#| label:  mapview_append
#| echo: true
#| eval: false
mapview(renabap) + mapview(salud_sf)
```

#### Superposición con estilos personalizados

```{r}
#| label: mapview_custom_append
#| echo: true
#| eval: false
mapview(
  renabap,
  col.regions = "tomato",
  color = "darkred",
  alpha.regions = 0.5,
  layer.name = "Barrios RENABAP"
) +
mapview(
  salud_sf,
  col.regions = "navy",
  layer.name = "Centros de Salud"
)

```

Se debe tener en cuenta que `mapview()` no se renderiza en documentos PDF, pero sí puede visualizarse en HTML o directamente desde RStudio. Además, al presionar el botón Export en la visualización interactiva, se puede exportar la visualización en HTML.

## Ejercitación 3. Geoprocesos

```{r}
#| label: st_use_sf2
#| eval: false
#| include: false
sf::sf_use_s2(FALSE)
```

El **geoprocesamiento vectorial** consiste en aplicar operaciones espaciales sobre datos representados mediante geometrías como puntos, líneas o polígonos. Estas operaciones permiten transformar, combinar y analizar objetos espaciales para generar nueva información o extraer conclusiones útiles en contextos como salud pública, urbanismo, medio ambiente, transporte, entre otros.

El geoprocesamiento vectorial permite:

-   Crear nuevas capas a partir de otras (por ejemplo, zonas de influencia).
-   Analizar relaciones espaciales entre entidades (como qué puntos están dentro de qué polígonos).
-   Extraer atributos espaciales (área, perímetro, centroides, distancias, etc.).
-   Filtrar o recortar geometrías según criterios espaciales.
-   Preparar datos para visualización o modelado.

| Función | ¿Qué hace? | Ejemplo básico |
|------------------------|------------------------|------------------------|
| `st_filter()` | Filtra objetos de una capa en función de su relación espacial con otra capa. No agrega atributos, solo selecciona. | `st_filter(puntos, poligono, .predicate = st_within)` |
| `st_buffer()` | Genera un área de influencia o zona de proximidad alrededor de una geometría. Muy útil para analizar cobertura o impacto. | `st_buffer(salud_sf, dist = 500)` |
| `st_intersection()` | Devuelve la geometría que resulta de la superposición espacial entre dos capas. | `st_intersection(capa1, capa2)` |
| `st_union()` | Une múltiples geometrías en una sola, útil para agrupar o simplificar capas. | `st_union(capa)` |
| `st_difference()` | Calcula la diferencia entre dos geometrías, eliminando la parte común. | `st_difference(capa1, capa2)` |
| `st_centroid()` | Calcula el centro geométrico de cada objeto. Útil para representar polígonos como puntos. | `st_centroid(poligonos)` |
| `st_distance()` | Calcula la distancia mínima entre geometrías. Fundamental para análisis de cercanía. | `st_distance(puntos1, puntos2)` |
| `st_area()` | Calcula el área de polígonos. Requiere un CRS proyectado para obtener resultados en m². | `st_area(poligonos)` |

### Unión espacial con `st_join()`

La función `st_join()` permite realizar una **unión espacial de atributos** entre dos capas vectoriales. Es el equivalente espacial de un "left join" de `dplyr`, pero en lugar de emparejar filas por un valor común, las empareja por su **relación espacial** (como intersección, inclusión, contención, etc.). Esta herramienta es especialmente útil cuando queremos **agregar información de una capa a otra** en función de cómo se relacionan espacialmente.

Sintaxis básica

```{r}
#| label: st_intersects
#| eval: false
#| include: false
st_join(x, y, join = st_intersects)
```

**x:** capa principal, que mantiene su geometría.

**y:** capa secundaria, de la que se traen atributos.

**join:** función que define la relación espacial (como st_intersects, st_within, etc.).

El resultado tendrá la geometría de x y los atributos agregados de y, según la relación espacial especificada.

**Tipos de relaciones espaciales usadas en `st_join()`:**

| Relación espacial | Uso dentro de `st_join()` | ¿Qué hace? |
|------------------------|------------------------|------------------------|
| **Intersección** | `join = st_intersects` | Une atributos si las geometrías se superponen en alguna parte. Muy común para unir puntos dentro de polígonos. |
| **Dentro de** | `join = st_within` | Une solo si la geometría de `x` está completamente dentro de `y`. |
| **Contiene** | `join = st_contains` | Une si `x` contiene completamente a `y`. |
| **Toca** | `join = st_touches` | Une si las geometrías se tocan pero no se superponen. |
| **Cruza** | `join = st_crosses` | Une si las geometrías se cruzan pero no están contenidas entre sí. |
| **Igual** | `join = st_equals` | Une si las geometrías son idénticas. |
| **Cercanía (distancia)** | `join = st_is_within_distance` | Une si los objetos están dentro de una distancia específica. Debe usarse con el argumento adicional `dist = ...`. |

Muchas de estas funciones de relación espacial (`st_intersects`, `st_within`, `st_contains`, etc.) pueden producir resultados similares o incluso iguales en algunos casos, especialmente cuando las geometrías son simples y no se superponen parcialmente.\
Por lo general, se usa `st_intersects` como opción estándar porque captura cualquier tipo de superposición entre geometrías.\
Las otras funciones se emplean en situaciones específicas donde se requiere definir con precisión cómo se relacionan los objetos espaciales (por ejemplo, cuando es importante que una geometría esté completamente dentro de otra, o solo en contacto en el borde). Por eso, la elección de la función depende del objetivo del análisis y del nivel de detalle necesario.

::: callout-warning
#### Advertencia

Antes de ejecutar un geoproceso entre dos capas es necesario que **ambas estén en el mismo sistema de referencia de coordenadas (CRS)**. Estas se pueden transformar utilizando la función `st_transform()`. Además, si al trabajar con **distancias, áreas, perímetros u otras medidas métricas** es fundamental que el CRS sea **proyectado** (por ejemplo, EPSG:5347), ya que los sistemas geográficos (como WGS84) no ofrecen unidades adecuadas para cálculos precisos.
:::

**Caso de estudio**

Queremos identificar qué centros de salud (`salud_sf`) están ubicados dentro de los barrios populares (`renabap`). Para ello, primero es necesario asegurarse que ambas capas estén en un sistema de coordenadas proyectado (en este caso, `EPSG:5347`), ya que las operaciones espaciales —como la intersección— requieren coherencia en el CRS.

```{r}
#| label: st_transform
#| echo: true
#| include: false
renabap  <- st_transform(renabap, 5347 )
salud_sf <- st_transform(salud_sf, 5347 )
```

Luego utilizamos `st_join()` con `st_intersects()` para realizar la unión espacial. El resultado lo guardamos en un nuevo objeto llamado salud_joined:

```{r}
#| label: salud_joined
salud_joined <- 
  st_join(salud_sf,
          renabap,
          join = st_intersects)
glimpse(salud_joined)
```

El objeto resultante, `salud_joined`, conserva la misma cantidad de filas que el objeto original `salud_sf` (esto no siempre es así con st_intersects, como veremos más adelante). A sus atributos se le suman las columnas provenientes de `renabap`, en aquellos casos donde existe una intersección espacial.

En las filas donde no hay intersección entre el centro de salud y algún barrio popular, las columnas correspondientes a renabap tendrán valores `NA`.

Probemos ahora a hacer la union espacial pero colocando como primer argumento (x) a la capa renabap:

```{r}
#| label: renabap_joined
renabap_joined <- 
  st_join(renabap,
          salud_sf,
          join = st_intersects)
glimpse(renabap_joined)
```

Observese que mientras el objeto original renabap antes del join tiene `r nrow(renabap)` filas, luego de hacer el join pasa a tener `r nrow(renabap_joined)` filas. ¿De donde surgen estas `r nrow(renabap_joined) - nrow(renabap)` filas de diferencia?

La respuesta es que existen barrios populares con más de un centro de salud en su interior. En otras palabras, cuando un mismo barrio intersecta con más de un centro de salud, el resultado del st_join() devuelve una fila por cada combinación de barrio y centro de salud intersectante, generando así múltiples registros para un mismo barrio.

```{r}
#| label: cantidad_centros_salud
renabap_joined |>
  st_drop_geometry() |>
  count(id_renabap, nombre_barrio, name = 'cantidad_centros_salud') |>
  filter(cantidad_centros_salud > 1)
```

Además de `st_join()`, existen varias funciones en `sf` que resultan fundamentales para el análisis espacial y la manipulación de datos vectoriales. Estas herramientas permiten trabajar con las geometrías y atributos de manera eficiente para responder a diferentes preguntas geográficas.

### Filtrado espacial `st_filter()`

Cuando deseamos identificar qué elementos de una capa espacial se encuentran dentro de otra capa —sin tener en cuenta los atributos de ambas— podemos utilizar la función st_filter(). Esta función permite aplicar filtros espaciales basados en relaciones geométricas, como la intersección, contención o proximidad. Por defecto, st_filter() usa la relación espacial st_intersects(), lo que significa que devuelve aquellos elementos cuya geometría se intersecta con al menos una geometría de la capa de referencia.

```{r}
st_filter(salud_sf,
          renabap) %>% 
  glimpse
```

### Áreas de influencia (buffer) con `st_buffer()`

`st_buffer()`genera áreas de influencia alrededor de geometrías espaciales. La distancia del buffer se define en las unidades del sistema de referencia de coordenadas (CRS). Es especialmente útil para análisis de proximidad.

```{r}
salud_buffer <- 
  st_buffer(salud_sf, dist = 500)
```

![](images/tp1_03_buffers_escuelas.png){fig-align="center"}

### Intersección espacial entre capas: `st_intersection()`

La función `st_intersection()` permite calcular la intersección entre dos objetos espaciales, es decir, obtener únicamente las partes donde sus geometrías se superponen. El resultado es un nuevo objeto `sf` que contiene esas porciones compartidas con geometrías modificadas y atributos combinados de ambas capas.

Por ejemplo, si se intersectan los polígonos de una capa de barrios con buffers de 500 metros construidos alrededor de centros de salud, el objeto resultante incluirá únicamente los fragmentos de barrios que caen dentro de esas áreas de influencia. No se conserva la geometría completa de los barrios ni de los buffers, sino solo las partes en las que coinciden espacialmente.

Además de modificar la geometría, `st_intersection()` conserva los atributos de ambas capas originales. Es decir, cada fila del objeto resultante incluirá información tanto del barrio como del buffer (y por lo tanto, del centro de salud que lo originó). Esto lo diferencia de funciones como `st_filter()`, que filtran pero no modifican geometrías ni combinan atributos.

```{r}
salud_intersection <- 
  st_intersection(renabap,
                  salud_buffer)
```

```{r}
#| eval: false
#| include: false
mapview(salud_buffer, col.regions = 'yellow', alpha = 0.3)+ mapview(renabap, alpha = 0.3, col.region = 'green') + mapview(salud_sf, alpha = 0.3) + mapview(salud_intersection, col.regions = 'tomato' )
```

**¿Qué ocurre con los nombres e índices al usar `st_intersection()`?**

Cuando se aplica `st_intersection()`, el objeto resultante suele tener un número de filas mayor al de cualquiera de las capas originales. Esto se debe a que cada intersección individual entre geometrías se convierte en una nueva fila. Por ejemplo, si un buffer intersecta con tres barrios, eso generará tres filas diferentes en el resultado, una por cada combinación.

En este nuevo objeto:

-   El índice de filas se reinicia y **ya no coincide** con los índices de las capas originales.
-   Se **combinan los atributos de ambas capas**. Si ambas tienen columnas con el mismo nombre, `sf` renombra automáticamente una de ellas (por ejemplo, agregando `.1` o `.2`).
-   En algunos casos, se agregan columnas especiales (como `row.id`, `origins`, `L1`, `L2`) para identificar de dónde proviene cada geometría.
-   Las geometrías del resultado representan **solo la parte compartida** entre ambas capas.

Por estas razones, es importante inspeccionar el objeto resultante con funciones como `glimpse()`, `names()`, o `head()` para entender su estructura antes de usarlo en análisis posteriores.

```{r}
salud_intersection %>% glimpse()
```

```{r}
  salud_intersection %>% 
  #st_drop_geometry() |>
  group_by(id_renabap) %>% 
  mutate(  cantidad = n() ) %>% 
  ungroup() %>% 
  arrange(id_renabap) %>% 
  filter(id_renabap == 57) 
```

### Fusion de geometrías con `st_union()`

La función `st_union()` permite **fusionar geometrías** en una sola, disolviendo los límites entre elementos. Se utiliza, por ejemplo, para unir todos los buffers en una única área de cobertura.\
No conserva atributos individuales, pero puede combinarse con `group_by()` y `summarise()` si se desea agrupar por una variable antes de la unión.

### Excluir áreas superpuestas: `st_difference()`

La función `st_difference()` devuelve las partes de una geometría que **no se superponen** con otra. Es útil para identificar áreas **excluidas** por una capa, como las zonas de un barrio que **no** están cubiertas por un buffer de salud.\

::: callout-warning
#### Advertencia al usar st_difference()

`st_difference(x, y)` calcula la parte de `x` que **no se superpone con** `y`. Si `y` tiene **múltiples geometrías**, la diferencia se aplica con **cada geometría por separado**, lo cual puede:

```         
-   Generar **resultados inesperados**, como duplicaciones o geometrías partidas.
-   Aumentar la cantidad de filas del resultado.
-   Complicar la interpretación espacial.
```

Es recomendable **fusionar previamente** las geometrías de `y` con `st_union()`, para que la diferencia se calcule respecto de una única geometría combinada.
:::

```{r}
renabap_lp <- 
  renabap %>% 
  filter(departamento == 'La Plata') 

salud_lp <-
  salud_buffer %>% 
  filter(nde == 'LA PLATA') %>% 
  st_union() %>% 
  st_as_sf()

resultado <- st_difference(renabap_lp, salud_lp)
```

```{r}
#| eval: false
#| include: false
renabap %>% 
  filter(provincia == 'Buenos Aires') %>% 
st_difference(salud_buffer)
```

A diferencia de `st_intersection()`, no conserva atributos de la segunda capa, y las geometrías resultantes pertenecen solo a la primera.

La función `st_centroid()` calcula el **centro geométrico** de cada objeto espacial. Es útil para representar áreas con un punto, por ejemplo, al ubicar etiquetas o simplificar visualizaciones.

La función `st_distance()` calcula la **distancia** entre geometrías. Puede aplicarse entre puntos, líneas o polígonos, y devuelve una matriz de distancias por defecto. Si se desea conocer la distancia mínima entre dos capas, se puede usar con índices.

La función `st_area()` calcula el **área** de geometrías tipo polígono. Devuelve un valor numérico en las unidades del sistema de referencia (por ejemplo, metros cuadrados si está en proyección métrica).

::: callout-important
#### Importante

Los procesos de geoprocesamiento que se presentaron no son exclusivos de R ni del paquete `sf`, sino que forman parte del conjunto de herramientas fundamentales en cualquier Sistema de Información Geográfica (GIS). Estas operaciones son compartidas y utilizadas en otros lenguajes como Python (con librerías como `geopandas` y `shapely`) o en software de escritorio como QGIS o ArcGIS. La lógica subyacente es común a todos los entornos.
:::

```{r}
#| eval: false
#| include: false
p <- 
  salud_intersection %>% 
  #st_drop_geometry() |>
  group_by(id_renabap) %>% 
  mutate(  cantidad = n() ) %>% 
  ungroup() %>% 
  arrange(id_renabap) %>% 
  filter(id_renabap == 57) 

ggplot() +
  geom_sf(data = p, fill = "tomato", color = "darkred", alpha = 0.5)+
  #geom_sf_text(data = p, aes(label = id), size = 3, color = "black") +  theme_minimal()+
  facet_wrap(~ id) +
  theme_minimal()

```

```{r}
#| include: false
#| eval: false
renabap_pba <- 
  renabap %>% filter(provincia == 'Buenos Aires')
```

```{r}
#| include: false
#| eval: false
ggplot() +
  geom_sf(data = renabap_pba, fill = "tomato", color = "darkred", alpha = 0.5) +
  labs(title = "Barrios Populares (RENABAP)",
       subtitle = "Fuente: datos.gob.ar",
       caption = "Visualización con geom_sf()")+
  annotation_scale(location = "bl", width_hint = 0.5) +
  annotation_north_arrow(location = "tl", which_north = "true",
                         style = north_arrow_fancy_orienteering)+
  annotation_map_tile(alpha = 0.3)+
  theme_minimal()
```
