---
title: "Sistemas de información geográfica. TP2: Geoprocesos con datos vectoriales (continuación)."
author: Marcos May
email: mmmay@fahce.unlp.edu.ar
format:
  pdf:
    toc: true
    toc-title: Indice
    number-sections: false
    toc-depth: 3
editor_options: 
  chunk_output_type: inline
---

## Objetivos

Este trabajo se propone introducir herramientas de análisis geoespacial con R aplicadas a una problemática educativa territorial: **la accesibilidad a escuelas secundarias** y las condiciones socioeducativas del entorno.

El ejercicio se desarrolla en el partido de **La Plata**, y se trabajará exclusivamente con **datos geográficos vectoriales**, es decir, información representada como **puntos** (escuelas) y **polígonos** (radios censales), incorporando atributos provenientes del **Censo 2022**.

------------------------------------------------------------------------

intro
tp1: geoprocesos presentacion
tp2: indice de accesibilidad

tp3: matriz de distancia, buffer de distancia fija, intersection,st_area, st_union

tp4: uso de apis: mapbox (uso de distancia manhatann, isocronas); georref; osmdata();

tp5: imagenes raster: carga; visualizacvion; principios basicos; extract; ejemplo: volumen construído

```{r setup, warning=FALSE, echo=FALSE, message=FALSE}
library(tidyverse)   # Manipulación de datos  
library(sf)          # Datos espaciales  
library(mapview)     # Mapas interactivos  
library(units)       # Manejo de distancias (metros/km)  
library(nngeo)       # Para cálculos de distancia más cercana  
library(here)        # Para manejar el path
library(janitor)     # Para limpieza de datos
library(ggspatial)
library(maptiles)
library(prettymapr)
library(readxl)
```


```{r}
rm(list = ls())
load(here('data/processed/lp.Rda'))
#load(here('data/processed/secundarias_lp.Rda'))
```

```{r}
salud <- st_read(here('data/processed/salud/centros_de_salud.gpkg'))
```
Cargamos el excel que descargamos de INDEC con la cantidad de hogares con algún porcentaje de nbi en los radios de La Plata

```{r}
nbi <- 
  read_excel(here("data/processed/redatam_censo/la_plata_nbi_radio.xlsX"),
             skip = 11,
             n_max = 1048) |> 
  rename(con_nbi = Sí,
         sin_nbi = No) |> 
  select(Código, con_nbi)
```

```{r}
lp <- left_join(lp,
                nbi,
                by = c('codigo' = 'Código'))
```


```{r}
glimpse(salud)
```


```{r}
salud <-  st_transform(salud, st_crs(lp))
salud <- st_filter(salud,lp)


```


los caps son las salitas municipales, quiero ver esos

```{r}
salitas <- salud |> filter(tes == 'Municipal')
```


```{r}
buffer <- salitas |> st_buffer(dist = 500)
```

Hago un join espacial, teniendo en cuenta la diferencia entre st_join() y st_intersection()

```{r}
lp_join <- st_join(buffer,
                   lp,
                   join = st_intersects)
```

```{r}
lp_join_ <- 
  lp_join |> 
  group_by(id) |> 
  summarise(nbi = sum(con_nbi) / sum(total_hogares), .groups = 'drop')
```

```{r}

```





```{r}
lp_intersection <- st_intersection (buffer,lp)
```


```{r}
lp$area <- as.numeric(st_area(lp))
```

```{r}
lp_intersection <- 
  st_intersection (lp,buffer)

```
```{r}
lp_intersection$area_i <- as.numeric(st_area(lp_intersection))
```

```{r}
lp_intersection <- 
  lp_intersection |> 
  mutate(prop_interseccion = area_i / area )
```


```{r}
summary(lp_intersection$prop_interseccion)
lp_intersection$area_km2 = factor( lp_intersection$area / 1000000)

```

```{r}
mapview(lp_intersection, 
        zcol = 'prop_interseccion',
        label = 'area_km2')
```
mapa coroplético
en mapview controlo color.region y quiebres con at. el valor central es el quiebre, mapa binario

```{r}
library(classInt)

breaks_jenks <- classInt::classIntervals(lp_intersection$prop_interseccion,
                                         n = 5, 
                                         style = "jenks")
cortes <- breaks_jenks$brks

colores <- colorRampPalette(colors = c("white", "red"))

mapview(lp_intersection,
        zcol = "prop_interseccion",
        layer.name = "Proporción de intersección",
        col.regions = colores,
        at = c(0, 0.33, 1), 
        legend = TRUE)

```

```{r}
 mapview(lp_intersection,
         zcol = "prop_interseccion",
         at = c(0, 0.30, 1),
         layer.name = "Proporción de intersección",
         legend = TRUE)
```
 
Lor sadios en blanco serán descarods.


```{r}
lp_intersection <- 
  lp_intersection |> filter(prop_interseccion > 0.333)
```


controlo con do_union dentro de summarise para fusionar o no las geometrías agrupadas
```{r}
salitas <- 
  lp_intersection |> 
  group_by(id) |> 
  summarise(nbi_per = sum(con_nbi) / sum(total_hogares),
            .groups = 'drop',  
            do_union = TRUE) |>  #poner FALSE para mantener separadas las geometrias 
  st_drop_geometry() |> 
  right_join(salitas)

```

```{r}
p <- lp_intersection |> 
  group_by(id) |> 
  mutate(nbi_per = sum(con_nbi) / sum(total_hogares)) |> 
  ungroup() |> 
  st_drop_geometry() |> 
  select(id,area_km2, prop_interseccion) |> arrange(desc(area_km2))


  
```






2


una api es una interfaz que permite el intercambio de datos entre sistemas informpáticos: el servidor te da datos específicos sin tener toda la base

1. Mapbox API: cálculo de isócronas con mapboxapi

Mapbox es una plataforma de cartografía basada en la nube. Su API de isócronas permite calcular áreas que pueden alcanzarse desde un punto dado en un tiempo determinado, según el modo de transporte (a pie, en auto, en bicicleta).

Este tipo de análisis es útil para evaluar, por ejemplo:

    Accesibilidad a escuelas o centros de salud,

    Desigualdad territorial en el acceso a servicios,

    Tiempo de viaje desde distintos puntos de una ciudad.

En R, usaremos la librería mapboxapi, que permite conectarse fácilmente con los servicios de Mapbox. Un ejemplo de uso básico:

library(mapboxapi)

# Configurar tu token de Mapbox
mb_access_token(Sys.getenv("MAPBOX_TOKEN"))

# Calcular una isócrona de 10 minutos caminando
iso <- mb_isochrone(
  location = c(-58.4173, -34.6118),  # Ejemplo: Congreso, CABA
  profile = "walking",
  minutes = 10
)

# Visualizar con leaflet
library(leaflet)
leaflet() %>%
  addTiles() %>%
  addPolygons(data = iso, fillColor = "blue", fillOpacity = 0.4)

2. OpenStreetMap: extracción de datos urbanos con osmdata

OpenStreetMap (OSM) es una base de datos cartográfica colaborativa y abierta, muy utilizada en investigación social. La API de OSM permite obtener datos detallados sobre el espacio urbano: calles, escuelas, hospitales, transporte, espacios verdes, etc.

En R, la librería osmdata permite escribir consultas a la API Overpass de forma intuitiva. Ejemplo: extraer escuelas en un barrio de Buenos Aires.

library(osmdata)

q <- opq("Villa Lugano, Buenos Aires") %>%
  add_osm_feature(key = "amenity", value = "school")

escuelas <- osmdata_sf(q)

# Visualización rápida
library(sf)
plot(escuelas$osm_points["name"])

Este enfoque es muy útil para construir indicadores territoriales, mapear infraestructura urbana o cruzar datos con encuestas sociales.
3. Geocodificación con geoAr: direcciones a coordenadas

Cuando trabajamos con bases de datos que contienen direcciones postales (como encuestas o padrones), necesitamos convertir esas direcciones en coordenadas geográficas para poder mapearlas o analizarlas espacialmente. Ese proceso se llama geocodificación.

La librería geoAr conecta con la API pública GGeorref, desarrollada por el Ministerio de Ciencia, Tecnología e Innovación de Argentina, para geocodificar direcciones, localidades y calles en territorio argentino.

Ejemplo básico:

library(geoAr)

# Geocodificar una dirección en CABA
geo <- geocode("Av. Rivadavia 3000, CABA")

geo

La salida incluye latitud y longitud, y se puede convertir fácilmente en un objeto sf para su análisis espacial.
Conclusión

Las APIs geoespaciales permiten trabajar con información territorial de forma dinámica y precisa, directamente desde R. Nos abren un abanico de posibilidades para estudiar fenómenos sociales con una dimensión espacial: desde el acceso a la educación, la salud o el transporte, hasta la planificación urbana y la visualización de desigualdades territoriales.

El uso combinado de mapboxapi, osmdata y geoAr nos permite:

    Obtener datos de infraestructura urbana,

    Geocodificar direcciones de nuestras bases,

    Medir accesibilidad territorial mediante isócronas.

Durante el seminario, aplicaremos estas herramientas en casos concretos para que puedan integrarlas en sus propios proyectos de investigación.
